PROMPT:
Instance ID: sympy__sympy-21436
Repository:  sympy/sympy

<issue>
Support orienting adjacent reference frames in arbitrary orders
Suppose you want to establish relative orientation among frames A, B, C, D, and E as such:

```
A ----- B
|
|-------C----D
        |
        |----E
```

A is the root of the tree, B, D, and E are leaves. You do this now with code that looks like:

```python
B.orient(A)
C.orient(A)
D.orient(C)
E.orient(C)
```

This will establish rotation matrices for each connection in the above graph. But a user may, for whatever reason, do something like (call this the alternative use case):

```python
B.orient(A)
A.orient(C)
C.orient(D)
E.orient(C)
```
This currently does not work because with every call of `X.orient()` all adjacent relationships to `X` will be cleared. That is, calling `.orient()` assumes `self`'s orientation relationships should be overwritten. This is sometimes needed, for example if I do:

```python
B.orient(A, ...)
A.orient(B, ...)
```

Anything that was defined in `B.orient(A, ...)` should be fully replaced with the relationships established with `A.orient(B, ...)` because they may be inconsistent with each other. Or if a user tries to do a loop:

```python
B.orient(A)
C.orient(B)
A.orient(C)
```

The last line should raise an error and say something like "Loops in graph not allowed", but what it does is overwrites all relationships to `A` in the last line, effectively undoing the first line.

The alternative use case should work. There is no reason we shouldn't allow construction of the graph in any sequence. Overwriting the relationships to `self` in calls to `orient()` is unnecessary. I think it was implemented like that because it was easier than checking the graph for consistency in a more thorough way.

I think the relationships between points do not have this issue and you can establish them in any order you like. It would be nice if frames also allowed that.

Here is some code that shows how the method `ReferenceFrame._dcm()` wipes relationships of `self`:

```ipython
IPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import sympy as sm

In [2]: import sympy.physics.mechanics as me

In [3]: A, B, C = sm.symbols("A, B, C", cls=me.ReferenceFrame)

In [4]: a, b, c = sm.symbols('a, b, c')

In [5]: B.orient(A, 'Axis', (a, A.x))

In [6]: A._dcm_dict
Out[6]: 
{B: Matrix([
 [1,      0,       0],
 [0, cos(a), -sin(a)],
 [0, sin(a),  cos(a)]])}

In [7]: B._dcm_dict
Out[7]: 
{A: Matrix([
 [1,       0,      0],
 [0,  cos(a), sin(a)],
 [0, -sin(a), cos(a)]])}

In [8]: C._dcm_dict
Out[8]: {}

In [9]: B.orient(C, 'Axis', (b, C.x))

In [10]: A._dcm_dict
Out[10]: {}

In [11]: B._dcm_dict
Out[11]: 
{C: Matrix([
 [1,       0,      0],
 [0,  cos(b), sin(b)],
 [0, -sin(b), cos(b)]])}

In [12]: C._dcm_dict
Out[12]: 
{B: Matrix([
 [1,      0,       0],
 [0, cos(b), -sin(b)],
 [0, sin(b),  cos(b)]])}

In [13]: sm.__version__
Out[13]: '1.7.1'
```

</issue>

Constraints:
- Provide a minimal, correct unified diff that will pass tests.
- Do NOT modify tests unless strictly required.
- Ensure file paths in the diff match the repository layout.

Return the diff wrapped in <patch>...</patch>.


RAW_RESPONSE:
<patch>
--- a/sympy/physics/vector/frame.py
+++ b/sympy/physics/vector/frame.py
@@ -1,5 +1,6 @@
 from sympy import (Matrix, eye, sin, cos, trigsimp, zeros, ImmutableMatrix,
-                   sympify, diff, Symbol, simplify, solve, symbols)
+                   sympify, diff, Symbol, simplify, solve, symbols,
+                   SympifyError)
 from sympy.core.compatibility import string_types, range
 from sympy.utilities.misc import filldedent
 
@@ -1000,7 +1001,6 @@ class ReferenceFrame(object):
         """
 
         _check_frame(frame)
-        self._dcm_dict = {}
         self._dcm_dict.update({frame: dcm})
         frame._dcm_dict.update({self: dcm.T})
         self._dlist = []
@@ -1008,6 +1008,7 @@ class ReferenceFrame(object):
         # Check if the dcm's are orthogonal
         if not Matrix([dcm.T * dcm - eye(3), dcm * dcm.T - eye(3)]).simplify().is_zero:
             raise ValueError("The dcm provided is not orthogonal.")
+        self._check_frame_recursively(self, set())
 
     def _orient(self, frame, rot_type, amounts, rot_order):
         """Orienting reference frame.
@@ -1033,6 +1034,26 @@ class ReferenceFrame(object):
         self._dcm(frame, dcm)
         self._rot_type = rot_type
 
+    def _check_frame_recursively(self, frame, visited):
+        """Check for loops in the frame graph.
+
+        Parameters
+        ==========
+
+        frame : ReferenceFrame
+            The frame to check.
+        visited : set
+            Set of frames already visited.
+
+        Raises
+        ======
+
+        ValueError
+            When a loop is detected in the frame graph.
+        """
+        if frame in visited:
+            raise ValueError("Loops in frame graph are not allowed")
+        visited.add(frame)
+        for other_frame in frame._dcm_dict:
+            frame._check_frame_recursively(other_frame, visited.copy())
+
     def orient(self, frame, rot_type, amounts, rot_order=''):
         """Orient the reference frame.
</patch>
