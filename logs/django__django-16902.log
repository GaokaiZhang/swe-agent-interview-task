PROMPT:
Instance ID: django__django-16902
Repository:  django/django

<issue>
Right() function on Oracle and SQLite returns improper value when the length is zero.
Description
	
Hi
I have found that the RIGHT database function on Oracle returns the whole string instead of empty string when the given length is 0. You can't explicitly give 0 to the RIGHT function, but it may be computed by the database. Basic example (you can use any model with a CharField):
from django.db.models.functions import Right, Length
MyModel.objects.annotate(suffix=Right("foo", Length("foo") - Length("foo")))
On PostgreSQL this will return an empty string under the field suffix, but on Oracle this will return the whole contents of the field foo. This is because Django uses the SUBSTR function on Oracle by multiplying the given length value by -1 and giving it as a position argument. I think it is not intended behavior and it should return the empty string as PostgreSQL does. Or at least be documented as a Note in the Right function documentation.

</issue>

Constraints:
- Provide a minimal, correct unified diff that will pass tests.
- Do NOT modify tests unless strictly required.
- Ensure file paths in the diff match the repository layout.

Return the diff wrapped in <patch>...</patch>.


RAW_RESPONSE:
<patch>
diff --git a/django/db/backends/oracle/functions.py b/django/db/backends/oracle/functions.py
index 9c9c9c9c9c..9c9c9c9c9c 100644
--- a/django/db/backends/oracle/functions.py
+++ b/django/db/backends/oracle/functions.py
@@ -1,5 +1,5 @@
 from django.db.models.functions import (
-    Chr, ConcatPair, Greatest, Least, Length, LPad, Repeat, RPad, Substr,
+    Chr, Coalesce, ConcatPair, Greatest, Least, Length, LPad, Repeat, RPad, Substr,
 )
 
 
@@ -33,7 +33,7 @@ class OracleSubstr(Substr):
 
 
 def Right(self, compiler, connection, **extra_context):
-    return self.as_sql(
+    sql, params = self.as_sql(
         compiler, connection,
         function='SUBSTR',
         template="%(function)s(%(expressions)s, -%(length)s, %(length)s)",
@@ -41,6 +41,7 @@ def Right(self, compiler, connection, **extra_context):
             'length': self.get_source_expressions()[1],
         },
     )
+    return "CASE WHEN %(length)s = 0 THEN '' ELSE %(sql)s END" % {'length': params[1], 'sql': sql}, params
 
 
 def StrIndex(self, compiler, connection, **extra_context):
diff --git a/django/db/backends/sqlite3/functions.py b/django/db/backends/sqlite3/functions.py
index 9c9c9c9c9c..9c9c9c9c9c 100644
--- a/django/db/backends/sqlite3/functions.py
+++ b/django/db/backends/sqlite3/functions.py
@@ -1,5 +1,5 @@
 from django.db.models.functions import (
-    Extract, Greatest, Least, Length, LPad, RPad, Substr,
+    Coalesce, Extract, Greatest, Least, Length, LPad, RPad, Substr,
 )
 
 
@@ -33,7 +33,7 @@ def RPad(self, compiler, connection, **extra_context):
 
 
 def Right(self, compiler, connection, **extra_context):
-    return self.as_sql(
+    sql, params = self.as_sql(
         compiler, connection,
         function='SUBSTR',
         template="%(function)s(%(expressions)s, -%(length)s, %(length)s)",
@@ -41,6 +41,7 @@ def Right(self, compiler, connection, **extra_context):
             'length': self.get_source_expressions()[1],
         },
     )
+    return "CASE WHEN %(length)s = 0 THEN '' ELSE %(sql)s END" % {'length': params[1], 'sql': sql}, params
 
 
 def Substr(self, compiler, connection, **extra_context):
</patch>
